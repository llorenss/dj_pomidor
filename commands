cd /mnt/c/python/dj_pomidor
py -m venv .venv --prompt VirtualEnv
.venv/Scripts/activate
deactivate
pip install Django==4.1.7 djangorestframework==3.14.0
pip freeze
pip freeze > req.txt
pip install -r requirements.txt
python.exe -m pip install --upgrade pip
docker-compose build
docker-compose up
docker-compose run --rm books-application sh -c "django-admin startproject books ."
docker-compose up --remove-orphans
docker-compose run --rm books-application sh -c "python manage.py startapp store"

docker-compose run --rm books-application sh -c "python manage.py makemigrations"
docker-compose run --rm books-application sh -c "./manage.py makemigrations"

docker-compose run --rm books-application sh -c "python manage.py migrate"
docker-compose run --rm books-application sh -c "./manage.py migrate"

docker-compose run --rm books-application sh -c "python manage.py showmigrations"
docker-compose run --rm books-application sh -c "python manage.py createsuperuser"

Тестирование

docker-compose run --rm books-application sh -c "python manage.py test store.tests.test_api"
docker-compose run --rm books-application sh -c "python manage.py test store.tests.test_serializer"

docker-compose run --rm books-application sh -c "coverage run --source='.' ./manage.py test store/tests"
docker-compose run --rm books-application sh -c "coverage report"
docker-compose run --rm books-application sh -c "coverage html"


Зайти в контейнер.
docker exec -it dj_pomidor_books-application_1 /bin/sh


https://question-it.com/questions/6785331/ja-sluchajno-udalil-papku-migratsii-v-django?ysclid=lem9phk7ls698488143
docker-compose run --rm books-application sh -c "python manage.py shell"
from django.db.migrations.recorder import MigrationRecorder
MigrationRecorder.Migration.objects.all().delete()
docker-compose run --rm books-application sh -c "python manage.py migrate --fake"
docker-compose run --rm books-application sh -c "python manage.py makemigrations -n drop_all_tables store_to_remove"
docker-compose run --rm books-application sh -c "python manage.py sqlclear books"
docker-compose run --rm books-application sh -c "python migrate store zero"
http://127.0.0.1:8000
http://127.0.0.1:8000/admin/
http://127.0.0.1:8000/book/
http://127.0.0.1:8000/book/?format=json

Фильтр
http://127.0.0.1:8000/book/?price=100

Поиск
http://127.0.0.1:8000/book/?search=tom

Сортировка
http://127.0.0.1:8000/book/?ordering=-price

https://www.django-rest-framework.org/api-guide/filtering/#djangofilterbackend

Тестирование
docker-compose run --rm books-application sh -c "python manage.py test store.tests.test_api.BooksApiTestCase.test_get"
docker-compose run --rm books-application sh -c "python manage.py test store.tests.test_api.BooksApiTestCase.test_get_search"

Авторизация

https://www.django-rest-framework.org/api-guide/permissions/

https://www.digitalocean.com/community/tutorials/oauth-2-ru

https://python-social-auth.readthedocs.io/en/latest/configuration/django.html

https://python-social-auth.readthedocs.io/en/latest/backends/github.html


CRUD
pip freeze > requirements.txt — команда, которая позволяет создать текстовый 
документ в котором перечислены все установленные и необходимые для работы 
Python приложения программные пакеты (чаще всего Django).

python manage.py collectstatic

https://docs.python.org/3/tutorial/venv.html

https://github.com/chepe4pi/books_lessons/tree/day_5/books


Запуск всех Тестов

https://docs.djangoproject.com/en/4.2/topics/testing/overview/
cd /mnt/c/python/dj_pomidor/books/books
docker-compose run --rm books-application sh -c "./manage.py test store/tests"
docker-compose run --rm books-application sh -c "./manage.py test store.tests.test_api.BooksApiTestCase.test_create"
docker-compose run --rm books-application sh -c "./manage.py test store.tests.test_api.BooksApiTestCase.test_update"
